/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TimelineIndexRouteImport } from './routes/timeline/index'
import { Route as ProjectsProjectIdRouteImport } from './routes/projects/$projectId'

const ProjectsIndexLazyRouteImport = createFileRoute('/projects/')()
const AboutIndexLazyRouteImport = createFileRoute('/about/')()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexLazyRoute = ProjectsIndexLazyRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/projects/index.lazy').then((d) => d.Route),
)
const AboutIndexLazyRoute = AboutIndexLazyRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/about/index.lazy').then((d) => d.Route))
const TimelineIndexRoute = TimelineIndexRouteImport.update({
  id: '/timeline/',
  path: '/timeline/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdRoute = ProjectsProjectIdRouteImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/timeline': typeof TimelineIndexRoute
  '/about': typeof AboutIndexLazyRoute
  '/projects': typeof ProjectsIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/timeline': typeof TimelineIndexRoute
  '/about': typeof AboutIndexLazyRoute
  '/projects': typeof ProjectsIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/timeline/': typeof TimelineIndexRoute
  '/about/': typeof AboutIndexLazyRoute
  '/projects/': typeof ProjectsIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/projects/$projectId' | '/timeline' | '/about' | '/projects'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/projects/$projectId' | '/timeline' | '/about' | '/projects'
  id:
    | '__root__'
    | '/'
    | '/projects/$projectId'
    | '/timeline/'
    | '/about/'
    | '/projects/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
  TimelineIndexRoute: typeof TimelineIndexRoute
  AboutIndexLazyRoute: typeof AboutIndexLazyRoute
  ProjectsIndexLazyRoute: typeof ProjectsIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/timeline/': {
      id: '/timeline/'
      path: '/timeline'
      fullPath: '/timeline'
      preLoaderRoute: typeof TimelineIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
  TimelineIndexRoute: TimelineIndexRoute,
  AboutIndexLazyRoute: AboutIndexLazyRoute,
  ProjectsIndexLazyRoute: ProjectsIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
